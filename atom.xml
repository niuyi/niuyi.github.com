<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Niu Yi's Blog]]></title>
  <link href="http://niuyi.github.com/atom.xml" rel="self"/>
  <link href="http://niuyi.github.com/"/>
  <updated>2012-04-07T00:00:11+08:00</updated>
  <id>http://niuyi.github.com/</id>
  <author>
    <name><![CDATA[Niu Yi]]></name>
    <email><![CDATA[niuyi2006@hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AutoFac使用方法总结:Part III]]></title>
    <link href="http://niuyi.github.com/blog/2012/04/06/autofact-by-unit-test3/"/>
    <updated>2012-04-06T23:48:00+08:00</updated>
    <id>http://niuyi.github.com/blog/2012/04/06/autofact-by-unit-test3</id>
    <content type="html"><![CDATA[<h3>生命周期</h3>


<p>AutoFac中的生命周期概念非常重要，AutoFac也提供了强大的生命周期管理的能力。</p>

<!-- more -->


<p>AutoFac定义了三种生命周期：</p>

<pre><code>Per Dependency
Single Instance
Per Lifetime Scope
</code></pre>

<p>Per Dependency为默认的生命周期，也被称为&#8217;transient&#8217;或&#8217;factory&#8217;，其实就是每次请求都创建一个新的对象</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">per_dependency</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;().</span><span class="n">InstancePerDependency</span><span class="p">();</span>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myClass1</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myClass2</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotEqual</span><span class="p">(</span><span class="n">myClass1</span><span class="p">,</span><span class="n">myClass2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Single Instance也很好理解，就是每次都用同一个对象</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">single_instance</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;().</span><span class="n">SingleInstance</span><span class="p">();</span>
</span><span class='line'>      
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myClass1</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myClass2</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>      
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">myClass1</span><span class="p">,</span><span class="n">myClass2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Per Lifetime Scope，同一个Lifetime生成的对象是同一个实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">per_lifetime_scope</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;().</span><span class="n">InstancePerLifetimeScope</span><span class="p">();</span>
</span><span class='line'>      
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myClass1</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myClass2</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>      
</span><span class='line'>        <span class="n">ILifetimeScope</span> <span class="n">inner</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">BeginLifetimeScope</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myClass3</span> <span class="p">=</span> <span class="n">inner</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myClass4</span> <span class="p">=</span> <span class="n">inner</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>      
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">myClass1</span><span class="p">,</span><span class="n">myClass2</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotEqual</span><span class="p">(</span><span class="n">myClass2</span><span class="p">,</span><span class="n">myClass3</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">myClass3</span><span class="p">,</span><span class="n">myClass4</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">   [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">life_time_and_dispose</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">Disposable</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">using</span> <span class="p">(</span><span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">outInstance</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">Disposable</span><span class="p">&gt;(</span><span class="k">new</span> <span class="n">NamedParameter</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="s">&quot;out&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">inner</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">BeginLifetimeScope</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">inInstance</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">Disposable</span><span class="p">&gt;(</span><span class="k">new</span> <span class="n">NamedParameter</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="s">&quot;in&quot;</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span><span class="c1">//inInstance dispose here</span>
</span><span class='line'>        <span class="p">}</span><span class="c1">//out dispose here</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoFac使用方法总结:Part II]]></title>
    <link href="http://niuyi.github.com/blog/2012/04/06/autofac-by-unit-test-2/"/>
    <updated>2012-04-06T23:38:00+08:00</updated>
    <id>http://niuyi.github.com/blog/2012/04/06/autofac-by-unit-test-2</id>
    <content type="html"><![CDATA[<h3>事件</h3>


<p>AutoFac支持三种事件：OnActivating，OnActivated，OnRelease。OnActivating在注册组件使用之前会被调用，此时可以替换实现类或者进行一些其他的初始化工作，OnActivated在实例化之后会被调用，OnRelease在组件释放之后会被调用。</p>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'>   <span class="k">public</span> <span class="k">class</span> <span class="nc">MyEvent</span> <span class="p">:</span> <span class="n">IDisposable</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="nf">MyEvent</span><span class="p">(</span><span class="kt">string</span> <span class="n">input</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="nf">MyEvent</span><span class="p">()</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Init&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Dispose&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'>   <span class="k">public</span> <span class="k">void</span> <span class="nf">test_event</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">MyEvent</span><span class="p">&gt;().</span>
</span><span class='line'>            <span class="n">OnActivating</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">ReplaceInstance</span><span class="p">(</span><span class="k">new</span> <span class="n">MyEvent</span><span class="p">(</span><span class="s">&quot;input&quot;</span><span class="p">))).</span>
</span><span class='line'>            <span class="n">OnActivated</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;OnActivated&quot;</span><span class="p">)).</span>
</span><span class='line'>            <span class="n">OnRelease</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;OnRelease&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="k">using</span> <span class="p">(</span><span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">myEvent</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyEvent</span><span class="p">&gt;())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
此时的输出为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Init</span>
</span><span class='line'><span class="n">input</span>
</span><span class='line'><span class="n">OnActivated</span>
</span><span class='line'><span class="n">Dispose</span>
</span><span class='line'><span class="n">OnRelease</span>
</span></code></pre></td></tr></table></div></figure>


<p>
利用事件可以在构造对象之后调用对象的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">call_method_when_init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">MyClassWithMethod</span><span class="p">&gt;().</span><span class="n">OnActivating</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="m">5</span><span class="p">));</span>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClassWithMethod</span><span class="p">&gt;().</span><span class="n">Index</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">MyClassWithMethod</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">int</span> <span class="n">Index</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="kt">int</span> <span class="k">value</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Index</span> <span class="p">=</span> <span class="n">Index</span> <span class="p">+</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>循环依赖</h3>


<p>循环依赖是个比较头疼的问题，在AutoFac中很多循环依赖的场景不被支持：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'>   <span class="k">public</span> <span class="k">class</span> <span class="nc">ClassA</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">private</span> <span class="k">readonly</span> <span class="n">ClassB</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="nf">ClassA</span><span class="p">(</span><span class="n">ClassB</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="n">b</span> <span class="p">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">ClassB</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="n">ClassA</span> <span class="n">A</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="na"> </span>
</span><span class='line'><span class="na"> [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">circular_dependencies_exception</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">ClassB</span><span class="p">(){</span><span class="n">A</span> <span class="p">=</span> <span class="n">c</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">ClassA</span><span class="p">&gt;()});</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">ClassA</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">ClassB</span><span class="p">&gt;()));</span>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">Throws</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">DependencyResolutionException</span><span class="p">),</span> <span class="p">()=&gt;</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">ClassA</span><span class="p">&gt;());</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以部分的解决这种循环依赖的问题，前提是ClassA和ClassB的生命周期不能都是InstancePerDependency</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">circular_dependencies_ok</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">ClassB</span><span class="p">&gt;().</span>
</span><span class='line'>            <span class="n">PropertiesAutowired</span><span class="p">(</span><span class="n">PropertyWiringFlags</span><span class="p">.</span><span class="n">AllowCircularDependencies</span><span class="p">).</span><span class="n">SingleInstance</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">ClassA</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">ClassB</span><span class="p">&gt;()));</span>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">ClassA</span><span class="p">&gt;());</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">ClassB</span><span class="p">&gt;());</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">ClassB</span><span class="p">&gt;().</span><span class="n">A</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoFac使用方法总结:Part I]]></title>
    <link href="http://niuyi.github.com/blog/2012/04/06/autofac-by-unit-test/"/>
    <updated>2012-04-06T23:07:00+08:00</updated>
    <id>http://niuyi.github.com/blog/2012/04/06/autofac-by-unit-test</id>
    <content type="html"><![CDATA[<p>AutoFac是.net平台下的IOC容器产品，它可以管理类之间的复杂的依赖关系。在使用方面主要是register和resolve两类操作。
这篇文章用单元测试的形式列举了AutoFac的常用使用方法：</p>

<!-- more -->


<h3>注册部分</h3>


<p>使用RegisterType进行注册</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">can_resolve_myclass</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myClass</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">myClass</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注册为接口</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">register_as_interface</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">MyClass</span><span class="p">()).</span><span class="n">As</span><span class="p">&lt;</span><span class="n">MyInterface</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyInterface</span><span class="p">&gt;());</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">Throws</span><span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="n">ComponentNotRegisteredException</span><span class="p">),</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;());</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>使用lambda表达式进行注册</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">can_register_with_lambda</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">MyClass</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myClass</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">myClass</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>带构造参数的注册</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">register_with_parameter</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">MyParameter</span><span class="p">());</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">MyClass</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyParameter</span><span class="p">&gt;()));</span>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;());</span>
</span><span class='line'>    <span class="p">}</span>  
</span></code></pre></td></tr></table></div></figure>


<p>带属性赋值的注册</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">register_with_property</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">MyProperty</span><span class="p">());</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span>
</span><span class='line'>            <span class="n">c</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">MyClass</span><span class="p">()</span>
</span><span class='line'>                     <span class="p">{</span>
</span><span class='line'>                         <span class="n">Property</span> <span class="p">=</span> <span class="n">c</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyProperty</span><span class="p">&gt;()</span>
</span><span class='line'>                     <span class="p">});</span>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myClass</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">myClass</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">myClass</span><span class="p">.</span><span class="n">Property</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>      
</span></code></pre></td></tr></table></div></figure>


<p>Autofac分离了类的创建和使用，这样可以根据输入参数（NamedParameter）动态的选择实现类。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">select_an_implementer_based_on_parameter_value</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">Register</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;((</span><span class="n">c</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>                             <span class="p">{</span>
</span><span class='line'>                                 <span class="kt">var</span> <span class="n">type</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">Named</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(</span><span class="s">&quot;type&quot;</span><span class="p">);</span>
</span><span class='line'>                                 <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="p">==</span> <span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'>                                 <span class="p">{</span>
</span><span class='line'>                                     <span class="k">return</span> <span class="k">new</span> <span class="nf">TestRepository</span><span class="p">();</span>
</span><span class='line'>                                 <span class="p">}</span>
</span><span class='line'>                                 <span class="k">else</span>
</span><span class='line'>                                 <span class="p">{</span>
</span><span class='line'>                                     <span class="k">return</span> <span class="k">new</span> <span class="nf">DbRepository</span><span class="p">();</span>
</span><span class='line'>                                 <span class="p">}</span>
</span><span class='line'>                             <span class="p">}).</span><span class="n">As</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">repository</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;(</span><span class="k">new</span> <span class="n">NamedParameter</span><span class="p">(</span><span class="s">&quot;type&quot;</span><span class="p">,</span> <span class="s">&quot;test&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">TestRepository</span><span class="p">),</span><span class="n">repository</span><span class="p">.</span><span class="n">GetType</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>AufoFac也可以用一个实例来注册，比如用在单例模式情况下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">register_with_instance</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterInstance</span><span class="p">(</span><span class="n">MyInstance</span><span class="p">.</span><span class="n">Instance</span><span class="p">).</span><span class="n">ExternallyOwned</span><span class="p">();</span>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myInstance1</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyInstance</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myInstance2</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyInstance</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">myInstance1</span><span class="p">,</span><span class="n">myInstance2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注册open generic类型</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">register_open_generic</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterGeneric</span><span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="n">MyList</span><span class="p">&lt;&gt;));</span>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myIntList</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;&gt;();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">myIntList</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myStringList</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;&gt;();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">myStringList</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于同一个接口，后面注册的实现会覆盖之前的实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">register_order</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">containerBuilder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">containerBuilder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">DbRepository</span><span class="p">&gt;().</span><span class="n">As</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">containerBuilder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">TestRepository</span><span class="p">&gt;().</span><span class="n">As</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">containerBuilder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">repository</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">TestRepository</span><span class="p">),</span> <span class="n">repository</span><span class="p">.</span><span class="n">GetType</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不想覆盖的话，可以用PreserveExistingDefaults，这样会保留原来注册的实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">register_order_defaults</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">containerBuilder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">containerBuilder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">DbRepository</span><span class="p">&gt;().</span><span class="n">As</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">containerBuilder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">TestRepository</span><span class="p">&gt;().</span><span class="n">As</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;().</span><span class="n">PreserveExistingDefaults</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">containerBuilder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">repository</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="n">DbRepository</span><span class="p">),</span> <span class="n">repository</span><span class="p">.</span><span class="n">GetType</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以用Name来区分不同的实现，代替As方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">register_with_name</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">containerBuilder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">containerBuilder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">DbRepository</span><span class="p">&gt;().</span><span class="n">Named</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;(</span><span class="s">&quot;DB&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">containerBuilder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">TestRepository</span><span class="p">&gt;().</span><span class="n">Named</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;(</span><span class="s">&quot;Test&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">containerBuilder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">dbRepository</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">ResolveNamed</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;(</span><span class="s">&quot;DB&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">testRepository</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">ResolveNamed</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;(</span><span class="s">&quot;Test&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">DbRepository</span><span class="p">),</span> <span class="n">dbRepository</span><span class="p">.</span><span class="n">GetType</span><span class="p">());</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">TestRepository</span><span class="p">),</span> <span class="n">testRepository</span><span class="p">.</span><span class="n">GetType</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果一个类有多个构造函数的话，可以在注册时候选择不同的构造函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">choose_constructors</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">MyParameter</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;().</span><span class="n">UsingConstructor</span><span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="n">MyParameter</span><span class="p">));</span>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">myClass</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">myClass</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>AutoFac可以注册一个Assemble下所有的类，当然，也可以根据类型进行筛选</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">  [Fact]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">register_assembly</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContainerBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="n">builder</span><span class="p">.</span><span class="n">RegisterAssemblyTypes</span><span class="p">(</span><span class="n">Assembly</span><span class="p">.</span><span class="n">GetExecutingAssembly</span><span class="p">()).</span>
</span><span class='line'>            <span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">EndsWith</span><span class="p">(</span><span class="s">&quot;Repository&quot;</span><span class="p">)).</span>
</span><span class='line'>            <span class="n">AsImplementedInterfaces</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">IContainer</span> <span class="n">container</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">repository</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IRepository</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">Assert</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">repository</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress + Github：打造自己的blog]]></title>
    <link href="http://niuyi.github.com/blog/2012/04/05/how-to-use-octopress-in-win7/"/>
    <updated>2012-04-05T20:40:00+08:00</updated>
    <id>http://niuyi.github.com/blog/2012/04/05/how-to-use-octopress-in-win7</id>
    <content type="html"><![CDATA[<p>Octopress是个基于Jekyll的Blog框架，非常的简单好用。特别的是，在Octopress的网站上明确说明：“Octopress is a blogging framework for hackers”，这是给热爱折腾的人准备的，如果你不喜欢折腾，千万别碰这个东西！</p>

<!-- more -->


<h4>Step 1：安装Ruby环境</h4>


<p>Octopress是基于Ruby的，所以必须要在机器上安装Ruby的环境。如果是Linux或Mac，安装要容易的多，可以参考Octopress官方网站上的说明。这里着重介绍下在Win7下的安装方法：
在Win7下安装需要下载这两个东东：rubyinstaller和DevKit。Ruby的版本必须是1.9.2以上版本。需要将ruby的主目录（如D:\Ruby193）添加到Windows环境变量Path里。</p>

<h5>Windows下DevKit的安装方法：</h5>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd &lt;DEVKIT_INSTALL_DIR&gt;
</span><span class='line'>ruby dk.rb init
</span><span class='line'>ruby dk.rb install
</span><span class='line'>#check
</span><span class='line'>gem install rdiscount --platform=ruby</span></code></pre></td></tr></table></div></figure>


<p>安装完成后，可以在命令行里运行如下命令测试：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby --version  # Should report Ruby 1.9.2</span></code></pre></td></tr></table></div></figure>


<h4>Step 2: 安装Python环境</h4>


<p>为什么还要Python？Octopress里面的代码语法高亮的插件需要Python的支持。代码语法高亮也是技术blog的最大亮点，所以一定要安装。这里有个非常tricky的地方，我的环境是Win7 64位，但是下载Python64位的安装包之后总有问题，后来换成32位的安装包：<a href="http://www.python.org/ftp/python/2.7.2/python-2.7.2.msi">python-2.7.2.msi</a>就OK了。具体可以参考这2个讨论：<a href="https://github.com/imathis/octopress/issues/262">issue 1</a>，<a href="https://github.com/github/gollum/issues/225">issue 2</a></p>

<h4>Step 3：Setup Octopress</h4>


<p>这步非常简单，参照官网上的说明即可：
Setup Octopress</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress</span></code></pre></td></tr></table></div></figure>


<p>安装依赖</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>安装默认主题</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>




<h4>Step 4: Deploy Octopress</h4>


<p>可以使用Github的<a href="pages.github.com">Pages service</a>来host自己的blog。
现在github上创建一个新的Repository（当然，你需要在github上注册），Project Name是username.github.com（比如abc.github.com），这样你的blog默认地址就是abc.github.com。</p>

<p>然后在命令行里执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>命令行会提示输入你repo的read/write的地址，正确输入后octopress会替你完成剩余的操作。
接着执行如下命令完成deploy：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>最后提交source代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>




<h4>Step 5: 开始写Blog</h4>


<p>现在终于可以开始写blog了，在命令行里执行如下操作开始一个新的文章：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<p>在source/_posts下会生成一个以markdown为后缀名的文件，这个就是你的文章的内容。可以编辑这个文件来写blog。
在写的过程中可以通过如下命令实时查看效果(http://localhost:4000/)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate   # Generates posts and pages into the public directory
</span><span class='line'>rake watch      # Watches source/ and sass/ for changes and regenerates
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>




<h4>Step 6: 定制自己的Blog</h4>


<h5>中文问题</h5>


<p>在Win7下，Octopress的中文经常有问题。网上有很多解决方案，我的方案是在文本编辑器里选择UTF-8无BOM格式编码，就可以支持中文了。</p>

<h5>侧边栏</h5>


<p>Octopress中可以添加自定义的侧边栏，在source/includes/custom/asides/里已经有个about.html，可以编辑这个文件添加个人介绍。然后在config.yml里的default_asides:加上custom/asides/about.html就可以在侧边栏里显示出来。</p>

<h5>评论</h5>


<p>评论是基于disqus提供的服务。先在disqus上注册，然后在_config.yml里找到相关部分添加上内容既可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Disqus Comments
</span><span class='line'>disqus_short_name: 
</span><span class='line'>disqus_show_comment_count: true</span></code></pre></td></tr></table></div></figure>




<h5>新浪微博的加关注</h5>


<p>参考这篇<a href="http://blog.tingkun.com/blog/2011/11/05/xin-lang-wei-bo-ce-lan-widgetding-zhi-octopress/">Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://niuyi.github.com/blog/2012/04/01/hello-world/"/>
    <updated>2012-04-01T22:55:00+08:00</updated>
    <id>http://niuyi.github.com/blog/2012/04/01/hello-world</id>
    <content type="html"><![CDATA[<p>Hello World!</p>
]]></content>
  </entry>
  
</feed>
